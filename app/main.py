#!/usr/bin/env python3

import jwt
import uvicorn
from os import getenv
from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient

from . import rest
from .schema import validate
from .pubsub import PubSub

app = FastAPI()

# Allow cross-origin requests
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"]
)

# Token authorization (generated by auth container)
secret = getenv('AUTH_SECRET')

@app.on_event("startup")
async def startup():
    # Initialize the database
    client = AsyncIOMotorClient('mongo')
    if 'objects' not in await client.graffiti.list_collection_names():
        await client.graffiti.create_collection('objects', changeStreamPreAndPostImages={'enabled': True})

    app.db = client.graffiti.objects

    # Create indexes if they don't already exist
    await app.db.create_index('id', unique=True)
    await app.db.create_index('actor')
    await app.db.create_index('tag')
    await app.db.create_index('bto')
    await app.db.create_index('bcc')

    # Keep track of the total set of tags that people are subscribed to
    # When that set changes, update the pipeline
    app.pubsub = PubSub(app.db)

@app.websocket("/")
async def query_socket(socket: WebSocket, token: str|None=None):
    await socket.accept()
    # Perform authorization
    socket.actor = None
    if token:
        try:
            token = jwt.decode(token, secret, algorithms=["HS256"])
            assert token["type"] == "token"
            socket.actor = "graffitiactor://" + token["owner_id"]
        except:
            await socket.send_json({
                'error': 'authorization',
                'detail': 'invalid token'
            })

    # Register with the pub/sub manager
    async with app.pubsub.register(socket):

        # Send messages back and forth
        while True:
            try:
                msg = await socket.receive_json()
                await reply(socket, msg)
            except:
                break

async def reply(socket, msg):
    # Initialize the output
    output = {}
    if 'messageID' in msg:
        output['messageID'] = msg['messageID']

    # Make sure the message is formatted properly
    try:
        validate(msg)
    except Exception as e:
        output['error'] = 'validation'
        output['detail'] = str(e).split('\n')[0]
        return await socket.send_json(output)

    # Pass it to the proper function
    try:

        if 'update' in msg:
            reply = await rest.update(app.db, msg['update'], socket.actor)

        elif 'remove' in msg:
            reply = await rest.remove(app.db, msg['remove'], socket.actor)

        elif 'subscribe' in msg:
            reply = await app.pubsub.subscribe(msg['subscribe'], socket)

        elif 'unsubscribe' in msg:
            reply = await app.pubsub.unsubscribe(msg['unsubscribe'], socket)

        elif 'get' in msg:
            reply = await rest.get(app.db, msg['get'], socket.actor)

        elif 'ls' in msg:
            reply = await rest.tags(app.db, socket.actor)

        output["reply"] = reply

    except Exception as e:
        output['error'] = 'unknown'
        output['detail'] = str(e)

    finally:
        await socket.send_json(output)

if __name__ == "__main__":
    args = {}
    if getenv('DEBUG') == 'true':
        args['reload'] = True
    uvicorn.run('app.main:app', host='0.0.0.0', **args)
